# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import disticket_pb2 as disticket__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in disticket_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AppAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/disticket.AppAPI/Login',
                request_serializer=disticket__pb2.LoginRequest.SerializeToString,
                response_deserializer=disticket__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/disticket.AppAPI/Logout',
                request_serializer=disticket__pb2.LogoutRequest.SerializeToString,
                response_deserializer=disticket__pb2.Status.FromString,
                _registered_method=True)
        self.GetAvailability = channel.unary_unary(
                '/disticket.AppAPI/GetAvailability',
                request_serializer=disticket__pb2.GetRequest.SerializeToString,
                response_deserializer=disticket__pb2.GetResponse.FromString,
                _registered_method=True)
        self.PostBooking = channel.unary_unary(
                '/disticket.AppAPI/PostBooking',
                request_serializer=disticket__pb2.BookingRequest.SerializeToString,
                response_deserializer=disticket__pb2.Status.FromString,
                _registered_method=True)


class AppAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailability(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PostBooking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AppAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=disticket__pb2.LoginRequest.FromString,
                    response_serializer=disticket__pb2.LoginResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=disticket__pb2.LogoutRequest.FromString,
                    response_serializer=disticket__pb2.Status.SerializeToString,
            ),
            'GetAvailability': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailability,
                    request_deserializer=disticket__pb2.GetRequest.FromString,
                    response_serializer=disticket__pb2.GetResponse.SerializeToString,
            ),
            'PostBooking': grpc.unary_unary_rpc_method_handler(
                    servicer.PostBooking,
                    request_deserializer=disticket__pb2.BookingRequest.FromString,
                    response_serializer=disticket__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'disticket.AppAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('disticket.AppAPI', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AppAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disticket.AppAPI/Login',
            disticket__pb2.LoginRequest.SerializeToString,
            disticket__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disticket.AppAPI/Logout',
            disticket__pb2.LogoutRequest.SerializeToString,
            disticket__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAvailability(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disticket.AppAPI/GetAvailability',
            disticket__pb2.GetRequest.SerializeToString,
            disticket__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PostBooking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disticket.AppAPI/PostBooking',
            disticket__pb2.BookingRequest.SerializeToString,
            disticket__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RaftStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestVote = channel.unary_unary(
                '/disticket.Raft/RequestVote',
                request_serializer=disticket__pb2.RequestVoteReq.SerializeToString,
                response_deserializer=disticket__pb2.RequestVoteResp.FromString,
                _registered_method=True)
        self.AppendEntries = channel.unary_unary(
                '/disticket.Raft/AppendEntries',
                request_serializer=disticket__pb2.AppendEntriesReq.SerializeToString,
                response_deserializer=disticket__pb2.AppendEntriesResp.FromString,
                _registered_method=True)


class RaftServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RaftServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=disticket__pb2.RequestVoteReq.FromString,
                    response_serializer=disticket__pb2.RequestVoteResp.SerializeToString,
            ),
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=disticket__pb2.AppendEntriesReq.FromString,
                    response_serializer=disticket__pb2.AppendEntriesResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'disticket.Raft', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('disticket.Raft', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Raft(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disticket.Raft/RequestVote',
            disticket__pb2.RequestVoteReq.SerializeToString,
            disticket__pb2.RequestVoteResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AppendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disticket.Raft/AppendEntries',
            disticket__pb2.AppendEntriesReq.SerializeToString,
            disticket__pb2.AppendEntriesResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class LLMServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLLMAnswer = channel.unary_unary(
                '/disticket.LLMService/GetLLMAnswer',
                request_serializer=disticket__pb2.LLMRequest.SerializeToString,
                response_deserializer=disticket__pb2.LLMResponse.FromString,
                _registered_method=True)


class LLMServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLLMAnswer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LLMServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLLMAnswer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLLMAnswer,
                    request_deserializer=disticket__pb2.LLMRequest.FromString,
                    response_serializer=disticket__pb2.LLMResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'disticket.LLMService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('disticket.LLMService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LLMService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLLMAnswer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/disticket.LLMService/GetLLMAnswer',
            disticket__pb2.LLMRequest.SerializeToString,
            disticket__pb2.LLMResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
